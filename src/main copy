import { gameState } from './core/gameState.js';
import { renderChatList, clearChat, displayMessages } from './ui/chat.js';
import { showScreen, renderChoices } from './ui/screens.js';
import { loadPuregramPosts } from './ui/puregram.js';
import { updateClock } from './utils/clock.js';
//import { languageManager } from './LanguageManager.js';//

// Автоматический импорт всех глав arc1 через Vite
const arc1Modules = import.meta.glob('./chapters/arc1/*.js', { eager: true });
const chapters = {};
for (const path in arc1Modules) {
    // ./chapters/arc1/chapter1.js → chapter1
    const name = path.split('/').pop().replace('.js', '');
    chapters[name] = arc1Modules[path].default;
}

let puregramPosts = [];

// Переключение экранов по data-screen
function showScreenByName(screenName) {
    document.querySelectorAll('.screen').forEach(screen => {
        if (screen.dataset.screen === screenName) {
            screen.classList.add('active');
        } else {
            screen.classList.remove('active');
        }
    });
}

// Запуск главы
function startChapter(chapterId) {
    const chapter = chapters[chapterId];
    if (!chapter) return;

    gameState.currentChapter = chapterId;

    // Очищаем чат
    const chatContainer = document.getElementById('chat');
    if (chatContainer) clearChat(chatContainer);

    // Переключаем экран на чат
    showScreen('chat'); // Используем showScreen из screens.js

    // Получаем сообщения главы
    const messages = chapter.getText(gameState);

    // Показываем сообщения
    if (chatContainer) {
        displayMessages(messages, chatContainer, () => {
            const choices = chapter.getChoices ? chapter.getChoices(gameState) : [];
            const choicesContainer = document.getElementById('choices');
            if (choices && choices.length > 0 && choicesContainer) {
                choicesContainer.classList.add('visible');
                renderChoices(
                    choices.map(choice => ({
                        text: choice.text,
                        value: choice.id
                    })),
                    choicesContainer,
                    (choiceId) => {
                        choicesContainer.classList.remove('visible');
                        const selected = choices.find(c => c.id === choiceId);
                        if (selected) {
                            if (typeof selected.action === 'function') selected.action(gameState);
                            if (selected.nextChapter) {
                                if (chapter.puregramPost) {
                                    puregramPosts.push(chapter.puregramPost);
                                    const puregramFeed = document.getElementById('posts');
                                    if (puregramFeed) loadPuregramPosts(puregramPosts, puregramFeed);
                                }
                                startChapter(selected.nextChapter);
                            }
                        }
                    }
                );
            } else if (choicesContainer) {
                choicesContainer.classList.remove('visible');
            }
        }, chapterId);
    }
}

// PureGram: обновление ленты
function updatePuregram() {
    const puregramFeed = document.getElementById('posts');
    if (puregramFeed) loadPuregramPosts(puregramPosts, puregramFeed);
}

// Главная функция инициализации приложения
function initGame() {
    showScreen('start'); // Используем showScreen вместо showScreenByName
    document.querySelector('.start-game-button')?.addEventListener('click', () => {
        showScreen('chat'); // Переключаем на экран чата
        renderChatList();
        puregramPosts = [];
        updatePuregram();
        startChapter('chapter1');
    });

    // Кнопка "Начать новую игру"
    document.querySelector('.start-game-button')?.addEventListener('click', () => {
        showScreenByName('chat');
        renderChatList();
        puregramPosts = [];
        updatePuregram();
        startChapter('chapter1');
    });

    // Навигация между экранами
    document.querySelectorAll('[data-screen]').forEach(btn => {
        btn.addEventListener('click', () => {
            const screen = btn.getAttribute('data-screen');
            if (screen) showScreenByName(screen);
        });
    });

    // Переключение языка
    document.querySelector('.lang-btn')?.addEventListener('click', () => {
        languageManager.toggleLanguage();
        renderChatList();
        updatePuregram();
        if (gameState.currentChapter) startChapter(gameState.currentChapter);
    });

    // PureGram: возврат к чату
    document.querySelector('.back-btn')?.addEventListener('click', () => {
        showScreenByName('chat');
    });

    // Часы
    const clockElement = document.querySelector('.status-bar .time');
    console.log('clockElement:', clockElement); // Должен быть не null!
    if (clockElement) {
        updateClock(clockElement);
        setInterval(() => updateClock(clockElement), 1000);
    }

    // Кнопка "Начать новую главу" на экране конца игры
    document.querySelector('.start-new-chapter')?.addEventListener('click', () => {
        showScreenByName('chat');
        startChapter('chapter1');
    });
}

// Для PureGram back-btn и других глобальных вызовов
window.game = {
    showScreen: showScreenByName
};

window.addEventListener('DOMContentLoaded', initGame);